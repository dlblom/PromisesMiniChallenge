const arePromsisesAwesome = true;

const willLearnPromises = new Promise((resolve, reject) => {
  if (arePromsisesAwesome) {
    const knowledge = {
      topic: "promises",
    };
    resolve(knowledge);
  } else {
    const reason = new Error("promises aren't awesome");
    reject(reason);
  }
});

const showOff = (knowledge) => {
  const message = `Hey friend, I learned ${knowledge.topic}`;

  return Promise.resolve(message);
};

const tellEveryone = () => {
  console.log("before learning promises");
  willLearnPromises
    .then(showOff)
    .then((fulfilled) => console.log(fulfilled))
    .catch((error) => console.log(error.message));
  console.log("after learning promises");
};

tellEveryone();

// QUESTION: In what order will the three console.log statements generated by the tellEveryone function print in? In the answer array below, fill in the strings of the console.log statements in the order they will appear to check if you're correct! Explain why they console.logs print in that particular order.
const tellEveryoneQuestion = () => {
  let answer = [
    "before learning promises",
    "after learning promises",
    "Hey friend, I learned promises",
  ];
  return answer;
};

// QUESTION: What are the three states of promsies? Fill in your answers as strings of capitol letters in the answer array in the
const promiseStateQuestion = () => {
  let answer = ["PENDING", "FULFILED", "REJECTED"];
  return answer;
};

// Using promise chaining, multiply the result of the randomNumber promise by 2, then 3, then 4. Put console.log statements in the then blocks to see how the result changes.
let asyncNumber = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(5);
  }, 3 * 1000);
});

// Walkthrough: The initial promise resolves to 5 in 3 seconds, the .then() function is called, the value that it returns is passed to the next .then() and so on. Note: .then() always returns a promise
const multiplyRandomNumber = () => {
  return asyncNumber
    .then((result) => {
      console.log(result);
      return result * 2;
    })
    .then((result) => {
      console.log(result);
      return result * 3;
    })
    .then((result) => {
      console.log(result);
      return result * 4;
    });
};

// TODO: create an example where the student needs to chain promises

// DO NOT edit the code below, since these functions are being exported and used in the promsies.test.js file
module.exports = {
  tellEveryoneQuestion,
  promiseStateQuestion,
  multiplyRandomNumber,
};
