const arePromsisesAwesome = true;

const willLearnPromises = new Promise((resolve, reject) => {
  if (arePromsisesAwesome) {
    const knowledge = {
      topic: "promises",
    };
    resolve(knowledge);
  } else {
    const reason = new Error("promises aren't awesome");
    reject(reason);
  }
});

const showOff = (knowledge) => {
  const message = `Hey friend, I learned ${knowledge.topic}`;

  return Promise.resolve(message);
};

const tellEveryone = () => {
  console.log("before learning promises");
  willLearnPromises
    .then(showOff)
    .then((fulfilled) => console.log(fulfilled))
    .catch((error) => console.log(error.message));
  console.log("after learning promises");
};

tellEveryone();

// QUESTION: In what order will the three console.log statements generated by the tellEveryone function print in? In the answer array below, fill in the strings of the console.log statements in the order they will appear to check if you're correct! Explain why they console.logs print in that particular order.
const tellEveryoneQuestion = () => {
  let answer = [
    "before learning promises",
    "after learning promises",
    "Hey friend, I learned promises",
  ];
  return answer;
};

// QUESTION: What are the three states of promsies? Fill in your answers as strings of capitol letters in the answer array in the
const promiseStateQuestion = () => {
  let answer = ["PENDING", "FULFILED", "REJECTED"];
  return answer;
};

// TODO: example of a "broken promise which students need to fix"
// maybe a console.log in the "wrong place" like outside the .then block

// TODO: might need to refactor this to be able to write relavnt tests
const ingredients = ["banana", "strawberry", "milk", "ice"];

const makeSmoothie = new Promise((resolve, reject) => {
  if (ingredients.length >= 2) {
    resolve("Mmmm smoothie");
  } else {
    reject("We need some more ingredients to make a smoothie");
  }
});

//TODO: Write a function, smoothieResult, which returns the fulfilled makeSmoothie promise.
const smoothieResult = () => {
  return makeSmoothie
    .then((message) => console.log(`SUCCESS: ${message}`))
    .catch((error) =>
      console.log(`An error occured while preparing the smoothie: ${error}`)
    );
};

// TODO: create another instance where the student needs to write a promise

// TODO: create an example where the student needs to chain promises

// DO NOT edit the code below, since these functions are being exported and used in the promsies.test.js file
module.exports = {
  tellEveryoneQuestion,
  promiseStateQuestion,
  smoothieResult,
};
