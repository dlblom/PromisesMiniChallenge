// TODO: Interpret the code below to figure out what order the console.log statements generated by the tellEveryone function will print in
const willLearnPromises = new Promise((resolve, reject) => {
  let arePromsisesAwesome = true;
  if (arePromsisesAwesome) {
    const knowledge = {
      topic: "promises",
    };
    resolve(knowledge);
  } else {
    const reason = new Error("promises aren't awesome");
    reject(reason);
  }
});

const showOff = (knowledge) => {
  const message = `Hey friend, I learned ${knowledge.topic}`;

  return Promise.resolve(message);
};

const tellEveryone = () => {
  console.log("before learning promises");
  willLearnPromises
    .then(showOff)
    .then((fulfilled) => console.log(fulfilled))
    .catch((error) => console.log(error.message));
  console.log("after learning promises");
};

tellEveryone();

// TODO QUESTION: In what order will the three console.log statements generated by the tellEveryone function print in? In the answer array below, fill in the strings of the console.log statements in the order they will appear to check if you're correct! Explain why they console.logs print in that particular order.
const tellEveryoneQuestion = () => {
  let answer = [];
  return answer;
};

// TODO QUESTION: What are the three states of promsies? In the promiseStateQuestion function below, fill in your answers as strings of capital letters in the answer array.
const promiseStateQuestion = () => {
  let answer = [];
  return answer;
};

// TODO: Complete the function addTwo which accepts a number, n, and returns a new Promise which resolves to n + 2 if the input is of type number or rejects to `Error: Please enter a number`, if n is not of type number
const addTwo = (n) => {
};

// TODO: Using promise chaining, complete the function keepAddingByTwo which accepts a number, n, and adds 2 to the input number three times (HINT: your funcion should have three .then() blocks). Don't forget to handle errors!
const keepAddingByTwo = (n) => {

};

// TODO: Complete the function, rememberName, which returns a new Promise that will resolve with a name after 1 second or reject with `Error remembering name` if no name is provided
const rememberName = (name) => {

};

// TODO: Complete the function, sayHello, which returns a new Promise that will resolve to `Hello...name` (where name is a string passed into the sayHello function) if a name is passed in or rejects with `Error saying Hello` if a name is not passed in.
const sayHello = (name) => {

};

// TODO: Complete the delayedGreeting function which accepts a name (as a string), and uses promise chaining to combine the results of the rememberName and sayHello functions to form a Hello...name! greeting. Don't forget to handle errors!
const delayedGreeting = (name) => {

};

// TODO QUESTION: Fill in the blank to the follwing statement as a string of capital letters in the answer variable of the promiseAllQuestion function below: The Promise.all() method can be useful when waiting for several Promises to resolve in _ _ _ _ _ _ _ _.
const promiseAllQuestion = () => {
  let answer = "";
  return answer;
};

// TODO: Determine how the Promise.all() method could be used to obtain the results of promiseOne, promiseTwo and promiseThree at the same time in order to complete the addPromiseResults function below
const promiseOne = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(1);
  }, 1 * 1000);
});
const promiseTwo = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(2);
  }, 2 * 1000);
});

const promiseThree = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve(3);
  }, 3 * 1000);
});

// TODO: Complete the addPromiseResults function so that it returns the result of adding promiseOne, promiseTwo, and promiseThree together.
const addPromiseResults = (promiseOne, promiseTwo, promiseThree) => {

};

// DO NOT edit the code below, since these functions are being exported and used in the promsies.test.js file
module.exports = {
  tellEveryoneQuestion,
  promiseStateQuestion,
  addTwo,
  keepAddingByTwo,
  rememberName,
  sayHello,
  delayedGreeting,
  promiseAllQuestion,
  promiseOne,
  promiseTwo,
  promiseThree,
  addPromiseResults,
};
